using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using System.IO;
using System.Reflection;
using System;

public static class AttoAccessBuilder
{

    static string coreClassName = "Core";

    const string defaultCoreName = "Core";

    public static void ReloadAfterScripts()
    {
        ReloadServices();
    }

    [MenuItem("Tools/Regenerate AttoAccess")]
    public static void ReloadServices()
    {
        GetCoreName();
        var bindingsList = GetBindingsList();
        WriteAccessFile(bindingsList);
    }

    private static void GetCoreName()
    {
        var settings = new AttoSettingsProvider();
        var customCoreName = settings.Current.coreName;
        if (!string.IsNullOrEmpty(customCoreName))
        {
            coreClassName = customCoreName;
        }
        else
        {
            coreClassName = defaultCoreName;
        }
    }

    public static void LogReadyServices()
    {
        var bindingsList = GetBindingsList();
        foreach (var binding in bindingsList)
        {
            Debug.Log(binding.providerClass + " -> IMPLEMENTS -> " + binding.serviceSpecificationName + " AS A." + binding.accessDescriptor);
        }
        Debug.Log("Loaded services: " + bindingsList.Count);
    }

    static List<ServiceAtributeBinding> GetBindingsList()
    {
        List<ServiceAtributeBinding> results = new List<ServiceAtributeBinding>();

        foreach (Assembly assembly in AppDomain.CurrentDomain.GetAssemblies())
        {
            foreach (var type in assembly.GetTypes())
            {
                var binding = GetBindingFromType(type);
                if (binding != null && binding.IsEnabled)
                {
                    results.Add(binding);
                }
            }
        }
        
        return results;
    }

    static ServiceAtributeBinding GetBindingFromType(Type type)
    {
        ServiceAtributeBinding result = new ServiceAtributeBinding();

        result.providerClass = type;

        var attributes = type.GetCustomAttributes(typeof(BindService), true);

        BindService bindAttribute = null;

        foreach (var attribute in attributes)
        {
            if (attribute is BindService)
            {
                bindAttribute = (BindService)attribute;
                result.serviceMode = bindAttribute.serviceMode;
                result.serviceCaching = bindAttribute.serviceCaching;
            }
        }

        var interfaces = type.GetInterfaces();
        Type bindTarget = null;

        foreach (var item in interfaces)
        {
            if (item.Name.EndsWith("Service"))
            {
                bindTarget = item;
                break;
            }
        }

        bool hasInterface = (bindTarget != null);
        if (hasInterface)
        {
            result.serviceSpecificationName = bindTarget.Name;
            result.isInterfaced = true;
        }
        else
        {
            result.serviceSpecificationName = type.Name;
            result.isInterfaced = false;
        }

        if (!string.IsNullOrEmpty(bindAttribute.customAccessName))
        {
            result.serviceSpecificationName = bindAttribute.customAccessName;
        }

        if (!result.IsValid)
        {
            result = null;
        }

        return result;
    }

    static void WriteAccessFile(List<ServiceAtributeBinding> bindings)
    {
        var fileContents = "";
        fileContents += WriteClassHeader(bindings);

        foreach (var binding in bindings)
        {
            fileContents += WriteAccessDescriptor(binding);
        }

        fileContents += WriteClassFooter();
        
        string path = Application.dataPath + "/AttoAccess.cs";
        File.WriteAllText(path, fileContents);
        AssetDatabase.Refresh();
    }


    static string WriteClassHeader(List<ServiceAtributeBinding> bindings)
    {
        var result = "//This class is auto-generated by the Atto framework. You shouldn't edit it.\n\n\n";
        result += "using UnityEngine;\n\n public static partial class "+coreClassName+"\n{\n";
        result += "\t[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]\n";
        result += "\tpublic static void BindCommonServices()\n\t{\n";
        result += "\t\tAtto.Bind<ISettingsService, AttoSettingsProvider>();\n";
        result += "\t\tif (Atto.Get<ISettingsService>().Current.autoBindCommonServices)\n\t\t{\n";

        result += "\n\t\t//Interfaced services (replaceable):\n";
        foreach (var binding in bindings)
        {
            if (binding.isInterfaced)
            {
                result += "\t\t\tAtto.Bind<" + binding.serviceSpecificationName + "," + binding.providerClass.Name + ">();\n";
            }
        }

        result += "\n\t\t//Non-interfaced services:\n";
        foreach (var binding in bindings)
        {
            if (!binding.isInterfaced)
            {
                result += "\t\t\tAtto.Bind<" + binding.serviceSpecificationName + ">();\n";
            }
        }

        result += "\t\t}\n\t}\n\n";
        return result;
    }

    static string WriteAccessDescriptor(ServiceAtributeBinding binding)
    {
        string prefix = "";
        string sufix = "";
        if (!binding.IsVisible)
        {
            prefix = "/*This service is hidden from API use, use Atto.Get<IService>() to access it from other services.\n";
        }
        string header = "\tpublic static ";
        string type = binding.serviceSpecificationName + " " + binding.accessDescriptor;
        string body = " { get { ";
        if (binding.serviceCaching == ServiceCaching.Dynamic)
        {
            body += "return Atto.Get<" + binding.serviceSpecificationName + ">();";
            body += " }\n";
            body += "}\n";
        }
        else if (binding.serviceCaching == ServiceCaching.Static)
        {
            string privateAccessDescriptor = binding.accessDescriptor + "_ ";
            body += "if (" + privateAccessDescriptor + "== null) {";
            body += privateAccessDescriptor + "= Atto.Get<" + binding.serviceSpecificationName + ">();} return " + privateAccessDescriptor + ";";
            body += " } }\n";
            body += "\tstatic " + binding.serviceSpecificationName + " " + privateAccessDescriptor + ";";
        }
        else
        {
            Debug.LogError("Undefined caching service for " + binding.providerClass.ToString());
        }
        if (!binding.IsVisible)
        {
            sufix = "\n*/";
        }

        string result = prefix + header + type + body + sufix + "\n\n";
        return result;
    }

    static string WriteClassFooter()
    {
        return "}";
    }

    class ServiceAtributeBinding
    {
        public Type providerClass;
        public ServiceMode serviceMode;
        public ServiceCaching serviceCaching;
        public string accessDescriptor { get { return FormatAccessDescriptor(); } }

        public string serviceSpecificationName;
        public bool isInterfaced = true;

        public bool IsValid { get { return serviceSpecificationName != "" && providerClass != null && serviceCaching != ServiceCaching.Undefined && serviceMode != ServiceMode.Undefined; } }
        public bool IsEnabled { get { return serviceMode != ServiceMode.Disabled; } }
        public bool IsVisible { get { return serviceMode != ServiceMode.Hidden; } }

        private string FormatAccessDescriptor()
        {
            var result = serviceSpecificationName;
            if (result.StartsWith("I"))
            {
                result = result.Substring(1, result.Length - 1);
            }

            if (result.EndsWith("Service"))
            {
                result = result.Replace("Service", "");
            }

            if (result.EndsWith("Provider"))
            {
                result = result.Replace("Provider", "");
            }

            return result;
        }

        public override string ToString()
        {
            string result = "";
            if (providerClass != null)
            {
                result += "[Binding] " + providerClass.Name;
            }
            else
            {
                result += "[Binding] " + "UNKNOWN";
            }
            result += " provides " + serviceSpecificationName;
            result += " as " + coreClassName;
            result += "." + accessDescriptor;
            result += " with [" + serviceMode.ToString();
            result += ", " + serviceCaching.ToString() + "]";

            return result;
        }
    }

}
