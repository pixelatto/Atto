#pragma kernel CSMain

// Texturas para las temperaturas actuales y próximas
RWTexture2D<float> Result;
Texture2D<float> CurrentTemperatures;

// Parámetros de entrada
int width;
int height;
float dampingFactor; // Nueva variable para amortiguación
float ambientTemperature;
float ambientDissipation;

// Estructura para las propiedades de la celda
struct TemperatureCell
{
    float temperature;
    float thermalConductivity;
    int material;
};

StructuredBuffer<TemperatureCell> cells;

// Vecinos
static const int2 offsets[4] = { int2(0, 1), int2(0, -1), int2(1, 0), int2(-1, 0) };

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    int x = id.x;
    int y = id.y;

    if (x >= width || y >= height)
        return;

    int index = y * width + x;
    TemperatureCell cell = cells[index];

    // Convertir la temperatura de la celda actual a Kelvin
    float cellTemperatureKelvin = cell.temperature + 273.15f;

    float sumTemperaturesKelvin = 0.0;
    float sumConductivities = 0.0;

    for (int i = 0; i < 4; i++)
    {
        int2 neighborPos = int2(x, y) + offsets[i];
        if (neighborPos.x >= 0 && neighborPos.x < width && neighborPos.y >= 0 && neighborPos.y < height)
        {
            float neighborTemperatureCelsius = CurrentTemperatures.Load(int3(neighborPos, 0));
            float neighborTemperatureKelvin = neighborTemperatureCelsius + 273.15f;
            TemperatureCell neighborCell = cells[neighborPos.y * width + neighborPos.x];

            sumTemperaturesKelvin += neighborTemperatureKelvin;
            sumConductivities += neighborCell.thermalConductivity;
        }
    }

    if (sumConductivities > 0)
    {
        float averageNeighborTemperatureKelvin = sumTemperaturesKelvin / 4.0; // Promedio de los vecinos
        float laplacian = averageNeighborTemperatureKelvin - cellTemperatureKelvin; // Diferencia de temperatura
        
        // Ley de Fourier: Q = -kA(dT/dx)
        // Aquí, utilizamos una aproximación discreta en lugar de derivadas continuas
        float temperatureChangeKelvin = laplacian * cell.thermalConductivity;
        temperatureChangeKelvin *= dampingFactor; // Aplicar factor de amortiguación

        // Convertir de vuelta a Celsius
        Result[int2(x, y)] = (cellTemperatureKelvin + temperatureChangeKelvin) - 273.15f;
    }
    else
    {
        Result[int2(x, y)] = cell.temperature;
    }

    if (cell.material == 0)
    {
        Result[int2(x, y)] = (Result[int2(x, y)] * (1.0f - ambientDissipation) + ambientTemperature * ambientDissipation);
    }
}
