using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using System.IO;
using System.Reflection;
using System;

public static class AttoAccessBuilder
{

    const string coreClassName = "Core"; //Use whatever but not "Atto" or any existing class name

    [InitializeOnLoadMethod]
    public static void OnInitialize()
    {
        if (EditorApplication.isPlaying) { return; }
        EditorApplication.update += Update;
    }

    private static void Update()
    {
        if (EditorApplication.isPlayingOrWillChangePlaymode && !EditorApplication.isPlaying)
        {
            ReloadServices();
        }
    }

    [MenuItem("Tools/LogAssemblies")]
    public static void LogAssemblies()
    {
        Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
        foreach (var assembly in assemblies)
        {
            Debug.Log(assembly.FullName);
        }
    }

    [MenuItem("Tools/ReloadServices")]
    public static void ReloadServices()
    {
        var bindingsList = GetBindingsList();
        WriteAccessFile(bindingsList);
    }

    public static void LogReadyServices()
    {
        var bindingsList = GetBindingsList();
        foreach (var binding in bindingsList)
        {
            Debug.Log(binding.classType + " -> IMPLEMENTS -> " + binding.interfaceName + " AS A." + binding.accessDescriptor);
        }
        Debug.Log("Loaded services: " + bindingsList.Count);
    }

    static List<ServiceAtributeBinding> GetBindingsList()
    {
        List<ServiceAtributeBinding> results = new List<ServiceAtributeBinding>();

        foreach (Assembly assembly in AppDomain.CurrentDomain.GetAssemblies())
        {
            foreach (var type in assembly.GetTypes())
            {
                var binding = GetBindingFromType(type);
                if (binding != null)
                {
                    results.Add(binding);
                }
            }
        }
        
        return results;
    }

    static ServiceAtributeBinding GetBindingFromType(Type type)
    {
        string interfaceName = "";
        string accessDescriptor = "";

        var attributes = type.GetCustomAttributes(typeof(BindService), true);
        if (attributes.Length == 1)
        {
            BindService bindAttribute = (BindService)attributes[0];
            accessDescriptor = bindAttribute.accessDescriptor;
        }

        var interfaces = type.GetInterfaces();
        if (interfaces.Length == 1)
        {
            interfaceName = interfaces[0].ToString();
        }

        if (accessDescriptor != "" && interfaceName != "" && type != null)
        {
            return new ServiceAtributeBinding() { accessDescriptor = accessDescriptor, interfaceName = interfaceName, classType = type };
        }
        else
        {
            return null;
        }
    }

    static void WriteAccessFile(List<ServiceAtributeBinding> bindings)
    {
        var fileContents = "";
        fileContents += WriteClassHeader(bindings);

        foreach (var binding in bindings)
        {
            fileContents += WriteAccessDescriptor(binding);
        }

        fileContents += WriteClassFooter();
        
        string path = Application.dataPath + "/AttoAccess.cs";
        File.WriteAllText(path, fileContents);
        AssetDatabase.Refresh();
    }


    static string WriteClassHeader(List<ServiceAtributeBinding> bindings)
    {
        var result = "//This class is auto-generated by the Atto framework. You shouldn't edit it.\n\n\n";
        result += "using UnityEngine;\n\n public static partial class "+coreClassName+"\n{\n";
        result += "\t[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]\n\n";
        result += "\tpublic static void BindCommonServices()\n\t{\n";
        result += "\t\tAtto.Bind<ISettingsService, AttoSettingsProvider>();\n";
        result += "\t\tif (Settings.Current.autoBindCommonServices)\n{\n";

        foreach (var binding in bindings)
        {
            result += "\t\t\tAtto.Bind<" + binding.interfaceName + "," + binding.classType.Name + ">();\n";
        }

        result += "\t\t}\n\t}\n\n";
        return result;
    }

    static string WriteAccessDescriptor(ServiceAtributeBinding binding)
    {
        string header = "\tpublic static ";
        string type = binding.interfaceName + " " + binding.accessDescriptor;
        string body = "{ get { return Atto.Get<" + binding.interfaceName + ">(); }}\n\n";
        string result = header+type+body;
        return result;
    }

    static string WriteClassFooter()
    {
        return "}";
    }

    class ServiceAtributeBinding
    {
        public Type classType;
        public string accessDescriptor;
        public string interfaceName;
    }

}
